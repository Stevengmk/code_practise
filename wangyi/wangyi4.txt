import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	/**
	 * 小易有一些立方体，每个立方体的边长为1，他用这些立方体搭了一些塔。
	 * 现在小易定义：这些塔的不稳定值为它们之中最高的塔与最低的塔的高度差。
	 * 小易想让这些塔尽量稳定，所以他进行了如下操作：每次从某座塔上取下一块立方体，并把它放到另一座塔上。
	 * 注意，小易不会把立方体放到它原本的那座塔上，因为他认为这样毫无意义。
	 * 现在小易想要知道，他进行了不超过k次操作之后，不稳定值最小是多少。
	 */
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int k = in.nextInt();
		int []height = new int[n];
		for(int i=0;i<n;i++) {
			height[i] = in.nextInt();
		}
		
		
		int val=0;
		int count=0;
		Queue q = new LinkedList<String>();
//		do{
		for(int l=0;l<k;l++) {
			int max;
			int min;
			
//			for(int i=0;i<height.length;i++) {
//				System.out.print(height[i]+" ");
//			}
//			System.out.println();
			
			max = max(height);
			min = min(height);
			val = height[max]-height[min];
			if(val==1) {
				break;
			}else if(val==0){
				break;
			}else {
				count++;
				height[max]--;
				height[min]++;
//				val = height[m[2]]-height[m[3]];				
				int max_pos = max+1;
				int min_pos = min+1;
				String step = max_pos+" "+min_pos;
				q.add(step);
				
			}
		}
			
//		}while(count<k);
			
//			
//			
//			for(int a=0;a<4;a++) {
//				System.out.print(m[a]+" ");
//			}
//			System.out.println();
			
		System.out.println((height[max(height)]-height[min(height)])+" "+count);
//		System.out.println(val+" "+count);
		for(Object o:q) {
			System.out.println(o.toString());
		}
	}
	
	public static int max(int[] height) {
		int pos=0;
		int max = Integer.MIN_VALUE;
		for(int j=0;j<height.length;j++) {
			if(max<height[j]) {
				max=height[j];
				pos = j;
			}
		}
		return pos;
	}
	
	public static int min(int[] height) {
		int pos=0;
		int min = Integer.MAX_VALUE;
		for(int j=0;j<height.length;j++) {
			if( min>height[j]) {
				min=height[j];
				pos = j;
			}
		}
		return pos;
	}
		
	
	
//	public static int[] find(int[] height) {
//		int []max_min = new int[2];
//		int max=Integer.MIN_VALUE;
//		int min=Integer.MAX_VALUE;
//		int max_pos = -1;
//		int min_pos = -1;
//		for(int j=0;j<height.length;j++) {
//			if(height[j]>max) {
//				max = height[j];
//				max_pos = j;
//			}
//			if(height[j]<min) {
//				min = height[j];
//				min_pos = j;
//			}
//		}
////		max_min[0] = max;
////		max_min[1] = min;
//		max_min[0] = max_pos;
//		max_min[1] = min_pos;
////		System.out.println("max_pos:"+max_pos);
////		System.out.println("min_pos:"+min_pos);
//		
//		return max_min;
//	}
	
	
}
